// pages/api/check.js
import { google } from "googleapis";

export default async function handler(req, res) {
  try {
    const { site } = req.query; // user nh·∫≠p √¥ t√¨m ki·∫øm
    if (!site) return res.status(400).json({ message: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm" });

    // üü¢ Load key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng Vercel
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
    const sheetId = process.env.SHEET_ID;

    // üü¢ T·∫°o Google Sheets API client
    const client = new google.auth.JWT(
      credentials.client_email,
      null,
      credentials.private_key,
      ["https://www.googleapis.com/auth/spreadsheets.readonly"]
    );

    const sheets = google.sheets({ version: "v4", auth: client });

    // üü¢ L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ Sheet
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: sheetId,
      range: "A1:Q", // qu√©t h·∫øt c√°c c·ªôt t·ª´ CS -> M√£
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      return res.status(404).json({ message: "Sheet kh√¥ng c√≥ d·ªØ li·ªáu" });
    }

    // üü¢ Chu·∫©n h√≥a input: t√°ch nhi·ªÅu d√≤ng ho·∫∑c c√°ch nhau b·ªüi d·∫•u xu·ªëng d√≤ng, d·∫•u ph·∫©y, kho·∫£ng tr·∫Øng
    const searchTerms = site
      .split(/[\n,]+/)
      .map((s) => s.trim().toLowerCase())
      .filter((s) => s);

    // üü¢ L·∫•y header (A1:Q1) & data
    const header = rows[0];
    const data = rows.slice(1);

    // üü¢ Filter data: t√¨m theo site (E) ho·∫∑c m√£ (Q)
    const results = data.filter((row) => {
      const siteCol = row[4] ? row[4].toLowerCase() : ""; // c·ªôt E
      const codeCol = row[16] ? row[16].toLowerCase() : ""; // c·ªôt Q
      return searchTerms.some(
        (term) => siteCol === term || codeCol === term
      );
    });

    // üü¢ Tr·∫£ v·ªÅ JSON
    if (results.length === 0) {
      return res.status(200).json({ message: "Kh√¥ng t√¨m th·∫•y site ho·∫∑c m√£" });
    }

    // Convert th√†nh object c√≥ key header: value
    const formatted = results.map((row) => {
      let obj = {};
      header.forEach((col, idx) => {
        obj[col] = row[idx] || ""; // n·∫øu c·ªôt tr·ªëng th√¨ tr·∫£ ""
      });
      return obj;
    });

    return res.status(200).json({ data: formatted });
  } catch (err) {
    console.error("L·ªói server:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
}
